glmPred <- predict(glmFit, newData = testSA)
testSA = SAheart[-train,]
glmPred <- predict(glmFit, newData = trainSA)
glmPred
glmPred <- predict(glmFit, newData = trainSA, method = "response")
glmPred <- predict(glmFit, testSA)
glmPred <- predict(glmFit, testSA)
missClass(testSA$chd, glmPred)
glmPredTrain <- predict(glmFit, testSA)
missClass(trainSA$chd, glmPredTrain)
glmPredTrain <- predict(glmFit, trainSA)
missClass(trainSA$chd, glmPredTrain)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfFit <- train(y ~ . , data = vowel.train, method = "rf")
varImp(rfFit)
Gini(rfFit)
gini(rfFit)
name(rfFit)
names(rfFit)
rfFit$results
rm(list = ls())
known <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.string = c("", "#DIV/0!", "NA"))
unknown <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.string = c("", "#DIV/0!", "NA"))
names(known)
known <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.string = c("", "#DIV/0!", "NA"))
unknown <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.string = c("", "#DIV/0!", "NA"))
names(known)
library(caret)
unknown <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.string = c("", "#DIV/0!", "NA"))
known <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.string = c("", "#DIV/0!", "NA"))
unknown <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.string = c("", "#DIV/0!", "NA"))
unknown <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.string = c("", "#DIV/0!", "NA"))
known <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
known <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
getwd()
known <- read.csv("train.csv", na.string = c("", "#DIV/0!", "NA"))
names(known)
inTrain <- createDataPartition(y = known$classe, size = nrows(known)/6)
?createDataPartition
inTrain <- createDataPartition(y = known$classe, p = nrows(known)/6)
inTrain <- createDataPartition(y = known$classe, p = nrow(known)/6)
inTrain <- createDataPartition(y = known$classe, p = 1/6)
inTrain <- createDataPartition(y = known$classe, p = 5/6)
train <- known[inTrain, ]
inTrain <- createDataPartition(y = known$classe, p = 5/6)
train <- known[inTrain, ]
head(inTrain)
unknown <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", na.string = c("", "#DIV/0!", "NA"))
unknown <- read.csv("test.csv", na.string = c("", "#DIV/0!", "NA"))
names(known)
naFracTest <- apply(test, 2, naFracFunction)
naFracFunction <- function(x) {sum(is.na(x))/length(x)}
naFracTest <- apply(test, 2, naFracFunction)
naFracTest <- apply(unknown, 2, naFracFunction)
hist(naFracTest)
Predictor <- names(naFracTest[naFracTest <= 0.8])
length(Predictor)
Predictor <- names(naFrac[naFrac <= 0.8])
naFrac <- apply(known, 2, naFracFunction)
Predictor <- names(naFrac[naFrac <= 0.8])
length(Predictor)
Predictor <- names(naFrac[naFrac <= 0.8])
length(Predictor)
PredictorTest <- names(naFracTest[naFracTest <= 0.8])
length(PredictorTest)
all.equal(names(Predictor), names(PredictorTest))
known <- known[, Predictor]
training <- training[,-c(1:7, 60)]
training <- known[inTrain, ]
inTrain <- createDataPartition(y = known$classe, p = 5/6)
library(caret)
inTrain <- createDataPartition(y = known$classe, p = 5/6)
training <- known[inTrain, ]
testing <- known[-inTrain, ]
known <- known[, Predictor]
dim(known)
inTrain <- createDataPartition(y = known$classe, p = 5/6)
training <- known[inTrain, ]
head(inTrain)
class(inTrain)
inTrain <- createDataPartition(y = known$classe, p = 5/6, list = FALSE)
class(inTrain)
training <- known[inTrain, ]
testing <- known[-inTrain, ]
training <- training[,-c(1:7, 60)]
testing <- known[-inTrain, ]
correlations <- cor(trainPred)
highCorr <- findCorrelation(correlations, 0.9)
correlations <- cor(training)
highCorr <- findCorrelation(correlations, 0.9)
trainPred <- trainPred[, -highCorr]
training <- training[, -highCorr]
dim(trainPred)
dim(training)
predModel <- train(train$classe ~ ., method = "repeatedcv")
predModel <- train(classe ~ ., data = training, method = "repeatedcv")
predModel <- train(Classe ~ ., data = training, method = "repeatedcv")
names(training)
training <- known[inTrain, ]
training <- training[,-c(1:7)]
correlations <- cor(training)
highCorr <- findCorrelation(correlations, 0.9)
training <- training[, -highCorr]
dim(training)
correlations <- cor(training[-training$classe])
?createDataPartition
library(caret)
?createDataPartition
?train
args(train.default)
args(trainControl)
library(caret);
library(kernlab); data(spam)
str(spam)
inTrain <- createDataPartition(y = type, data = spam, p = 0.75, list = FALSE)
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
?train
library(caret)
?train
setwd("C:/Users/WeiAnn/OneDrive/coursera/IDA MOOC data science/Machine learning")
?expand.grid
expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50),
sex = c("Male","Female"))
expand.grid(.interaction.depth = (1:5) * 2, + .n.trees = (1:10)*25, .shrinkage = .1
expand.grid(.interaction.depth = (1:5) * 2, .n.trees = (1:10)*25, .shrinkage = .1)
source("load_data.R")
getwd()
source("load_data.R")
households <- open.csv("load_data.csv")
households <- read.csv("load_data.csv")
library(ggplot2)
library(grid)
hist.w.mean <- function(data, variable) {
ggplot(data, aes_string(x=variable)) +
geom_histogram() +
geom_vline(xintercept=mean(data[[variable]], na.rm=TRUE),
color="red", linetype="dashed", size=1)
}
grid.newpage()
pushViewport(viewport(layout=grid.layout(1, 3)))
print(hist.w.mean(households, "people"), vp=viewport(layout.pos.row=1, layout.pos.col=1))
names(households)
namecol(households) <- c("Timestamp", "people", "sqft", "income")
names(households) <- c("Timestamp", "people", "sqft", "income")
names(households)
print(hist.w.mean(households, "people"), vp=viewport(layout.pos.row=1, layout.pos.col=1))
print(hist.w.mean(households, "sqft"), vp=viewport(layout.pos.row=1, layout.pos.col=2))
print(hist.w.mean(households, "income"), vp=viewport(layout.pos.row=1, layout.pos.col=3))
windows()
grid.newpage()
pushViewport(viewport(layout=grid.layout(1, 3)))
print(hist.w.mean(households, "people"), vp=viewport(layout.pos.row=1, layout.pos.col=1))
print(hist.w.mean(households, "sqft"), vp=viewport(layout.pos.row=1, layout.pos.col=2))
print(hist.w.mean(households, "income"), vp=viewport(layout.pos.row=1, layout.pos.col=3))
plot(households)
plot(households)
m = 0.5
c = 1
ggplot(data.frame(x=0, y=0), aes(x=x, y=y)) +
xlim(-2, 2) + ylim(-2, 2) +
geom_point() +
geom_abline(intercept=c, slope=m) +
geom_segment(x=0, xend=0, y=0, yend=c, linetype=2, color="red") +
geom_text(label="Intercept c = 1", x=0.1, y=c/2, color="red", size=10, hjust=0) +
geom_segment(x=0, xend=2, y=c, yend=c, linetype=2, color="blue") +
geom_segment(x=2, xend=2, y=c, yend=(m * 2 + c), linetype=2, color="blue") +
geom_text(label="Slope m = 0.5", x=1, y=(m + c + 0.1), color="blue", size=10,
angle=atan(m)/pi*180, vjust=-1)
p <- ggplot(households, aes(x=sqft, y=income)) +
geom_point() +
xlim(0, NA) + ylim(0, NA)
p
households <- read.csv("load_data.csv")
names(households) <- c("Timestamp", "people", "sqft", "income")
p <- ggplot(households, aes(x=sqft, y=income)) +
geom_point() +
xlim(0, NA) + ylim(0, NA)
p
line.colors = c("red", "orange", "blue", "green", "violet")
lines <- data.frame(intercept=0, slope=1:5, color=line.colors)
p + geom_abline(aes(intercept=intercept, slope=slope, color=color), data=lines)
m = 3
errors = data.frame(
sqft=households$sqft,
max=households$income,
min=m * households$sqft)
p +
geom_abline(slope=m, color="blue") +
geom_linerange(aes(x=sqft, y=max, ymax=max, ymin=min), data=errors, color="red")
best.slope <- lm(income ~ 0 + sqft, households)
m <- coef(best.slope)["sqft"]
p +
geom_abline(slope=m, color="blue") +
geom_text(label=paste0("y = ", prettyNum(m), "x"), x=0, y=0, color="blue", size=8, hjust=0)
p <- ggplot(households, aes(x=sqft, y=income)) +
geom_point() +
xlim(0, NA) + ylim(0, NA)
grid.newpage()
p <- ggplot(households, aes(x=sqft, y=income)) +
geom_point() +
xlim(0, NA) + ylim(0, NA)
p
line.colors = c("red", "orange", "blue", "green", "violet")
lines <- data.frame(intercept=seq(-2000, 2000, 1000), slope=3, color=line.colors)
p + geom_abline(aes(intercept=intercept, slope=slope, color=color), data=lines)
p +
geom_abline(intercept=-1000, slope=3, color="red") +
geom_abline(intercept=3000, slope=1, color="orange") +
geom_abline(intercept=1000, slope=2, color="blue") +
geom_abline(intercept=-1000, slope=4, color="green") +
geom_abline(intercept=3000, slope=0.5, color="violet")
best.line <- lm(income ~ sqft, households)
c <- coef(best.line)["(Intercept)"]
m <- coef(best.line)["sqft"]
p + geom_point(x=means$sqft, y=means$income, color="red", size=5) +
geom_abline(intercept=c, slope=m, color="blue") +
geom_text(label=paste0("y = ", prettyNum(c), " + ", prettyNum(m), "x"),
x=0, y=0, color="blue", size=8, hjust=0)
means = data.frame(sqft=mean(households$sqft), income=mean(households$income))
best.line <- lm(income ~ sqft, households)
c <- coef(best.line)["(Intercept)"]
m <- coef(best.line)["sqft"]
p + geom_point(x=means$sqft, y=means$income, color="red", size=5) +
geom_abline(intercept=c, slope=m, color="blue") +
geom_text(label=paste0("y = ", prettyNum(c), " + ", prettyNum(m), "x"),
x=0, y=0, color="blue", size=8, hjust=0)
library(ggplot2)
households.shifted <- households
households.shifted$sqft <- scale(households.shifted$sqft, scale=FALSE)
means = data.frame(sqft=mean(households.shifted$sqft), income=mean(households.shifted$income))
model <- lm(income ~ sqft, households.shifted)
c <- coef(model)["(Intercept)"]
m <- coef(model)["sqft"]
ggplot(households.shifted, aes(x=sqft, y=income)) +
geom_point() +
ylim(0, NA) +
geom_point(x=means$sqft, y=means$income, color="red", size=5) +
geom_abline(intercept=c, slope=m, color="blue") +
geom_text(label=paste0("y = ", prettyNum(c), " + ", prettyNum(m), "x"),
x=0, y=0, color="blue", size=8, hjust=0.5)
households.normalised <- as.data.frame(scale(households))
means = data.frame(sqft=mean(households.normalised$sqft), income=mean(households.normalised$income))
model <- lm(income ~ sqft, households.normalised)
c <- coef(model)["(Intercept)"]
m <- coef(model)["sqft"]
ggplot(households.normalised, aes(x=sqft, y=income)) +
geom_point() +
geom_point(x=means$sqft, y=means$income, color="red", size=5) +
geom_abline(intercept=c, slope=m, color="blue") +
geom_text(label=paste0("y = ", prettyNum(c), " + ", prettyNum(m), "x"),
x=0, y=min(households.normalised$income), color="blue", size=8, hjust=0.5)
cor(households$income, households$sqft)
households.normalised <- as.data.frame(scale(households))
sapply(households, class)
households.normalised <- as.data.frame(scale(households))
colmeans(households)
colMeans(households)
households.normalised <- as.data.frame(scale(as.numeric(households)))
apply(households, 2, scale)
library(ggplot2)
library(caret)
data(cars)
library(doSNOW)
coreNumber=max(detectCores(),1)
library(cluster)
library(parallel)
coreNumber=max(detectCores(),1)
coreNumber
cluster=makeCluster(coreNumber, type = "SOCK",outfile="")
registerDoSNOW(cluster)
set.seed(2291033)
inTrain = createDataPartition(y=cars$Price,p=0.7,list=F)
training = cars[inTrain,]
testing = cars[-inTrain,]
?rf
?train
modFitRF = train(Price~.,data=training,method="rf", importance = T) #randomForest, can take a while
modFitGBM = train(Price~.,data=training,method="gbm",verbose=F) #boosting
modFitRR = train(Price~.,data=training,method="ridge") #ridge regression
modFitRR
varImp(modFitRF)
predRF=predict(modFitRF,testing)
predGBM=predict(modFitGBM,testing)
predRR=predict(modFitRR,testing)
RMSE(predRF,testing$Price)
RMSE(predGBM,testing$Price)
RMSE(predRR,testing$Price)
data(iris)
inTrain = createDataPartition(y=iris$Species,p=0.7,list=F)
training = iris[inTrain,]
testing = iris[-inTrain,]
library(e1071)
irisP = classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
modFit = train(Species~.,data=training,method="rf",prox=T, importance = T)
irisP = classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP = as.data.frame(irisP); irisP$Species = rownames(irisP)
p = qplot(Petal.Width, Petal.Length, col=Species,data=training)
p+geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
pred=predict(modFit,testing)
testing$predRight = pred==testing$Species #see what we classified wrongly
confusionMatrix(pred, testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newData Predicitons")
library(caret)
?featurePlot
featurePlot(known, plto = "pairs")
featurePlot(known, plot = "pairs")
dim(known)
summary(known)
dim(known)
featurePlot(x = known$magnet_forearm_x, y = known$classe, plot = "pairs", data = known)
featurePlot(x = known$magnet_forearm_x, y = known$classe, plot = "pairs")
nrow(form$right)
nrow(known$right)
known <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.string = c("", "#DIV/0!", "NA"))
dim(known)
summary(known)
featurePlot(x = known$magnet_forearm_x, y = known$classe, plot = "pairs")
dim(known)
featurePlot(x = known[, 1:5], y = known$classe, plot = "pairs")
View(known)
train(training[,IL_ind], training$diagnosis, method = "glm", preProcess = "pca", trControl  = trainControl(preProcOptions = list(thresh = 0.8)))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train(training[,IL_ind], training$diagnosis, method = "glm")
train(training[,IL_ind], training$diagnosis, method = "glm", preProcess = "pca", trControl  = trainControl(preProcOptions = list(thresh = 0.8)))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_ind <- grep("^IL", names(training))
preProc <- preProcess(training[, IL_ind ], method = "pca", thresh = 0.8)
train(training[, IL_ind], training$diagnosis, method = "glm")
names(training)[IL_ind]
?train
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
preProc <- preProcess(training[, IL_ind], method = "pca", thresh = 0.8)
train(training[, IL_ind], training$diagnosis, method = "glm", metric = "Accuracy", preProcess = "pca", thresh = 0.8)
warnings()
train(training[, IL_ind], training$diagnosis, method = "glm", metric = "Accuracy")
train(training[, IL_ind], training$diagnosis, method = "glm", metric = "Accuracy", preProcess = preProc)
glmFit <- training(diagnosis ~ . , method = "glm", data = training2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[, c(1,IL_start)]
IL_start <- grep("^IL", names(adData))
training2 <- training[, c(1,IL_start)]
glmFit <- training(diagnosis ~ . , method = "glm", data = training2)
glmFit <- train(diagnosis ~ . , method = "glm", data = training2)
pcaFit <- train(diagnosis ~ . , method = "glm", data = training2, preProc = "pca", preProcOptions = list(thresh = 0.8))
pcaFit <- train(diagnosis ~ . , method = "glm", data = training2, preProc = "pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predict(glmFit, testing)
confusionMatrix(predict(glmFit, testing))
confusionMatrix(testing$diagnosis, predict(glmFit, testing))
names(confusionMatrix(testing$diagnosis, predict(glmFit, testing)))
confusionMatrix(testing$diagnosis, predict(glmFit, testing))$table
confusionMatrix(testing$diagnosis, predict(glmFit, testing))$overall
confusionMatrix(testing$diagnosis, predict(glmFit, testing))$overall[1]
confusionMatrix(testing$diagnosis, predict(pcaFit, testing))$overall[1]
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv/slidify')
install_github('slidify', 'ramnathv/slidify/slidify')
install_github('slidify', 'ramnathv/slidify/slidify/slidify')
?dnorm
x <- seq(1:100)
x
library(qqplot2)
library(qplot2)
library(ggplot2)
library(gplot2)
install.packages('ggplot2')
library(ggplot2)
install.packages("stringi")
library(ggplot2)
x <- seq(1:100)
distribution <- dnorm(x, mu, sd)
mu = 0
sd <- 1
mu<-0
x <- seq(1:100)
distribution <- dnorm(x, mu, sd)
qplot(distribution, aes(y = distribution, x = x)) + geom_line()
ggplot(distribution, aes(y = distribution, x = x)) + geom_line()
distribution <- dnorm(x, mu, sd)
distribution
x <- seq(-50:50)
x
x[1]
x[20]
?seq
x <- seq(-50, 50)
x
distribution <- dnorm(x, mu, sd)
distribution
x <- seq(-25, 25)
distribution <- dnorm(x, mu, sd)
ggplot(distribution, aes(y = distribution, x = x)) + geom_line()
ggplot(distribution, aes(y = distribution, x = x)) + geom_point()
df <- (y = c(1, 2, 3), x = c(1,2,3))
ggplot(df, aes(x =x , y = y))
data(mpg)
ggplot(mpg, aes(cty, hwy)) + geom_point()
head(mpg$cty)
head(mpg$hwy)
distribution_df <- data.frame(x = seq(-25, 25), y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = x)) + geom_point()
ggplot(distribution_df, aes(y = y, x = x)) + geom_line()
distribution_df <- data.frame(x = seq(-25, 25)*0.5, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = x)) + geom_line()
ggplot(distribution_df, aes(y = y, x = x)) + geom_point()
distribution_df <- data.frame(x = seq(-25, 25)*0.05, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = x)) + geom_point()
distribution_df <- data.frame(quantile = seq(-25, 25)*0.05, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
distribution_df <- data.frame(quantile = seq(-10, 10)*0.05, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
dnorm(c(0.1, 0.2, 0.3, 0.4))
dnorm(seq(-5, 5)*0.1)
df <- data.frame(x = seq(-5, 5)*0.1, y = dnorm(seq(-5, 5)*0.1))
ggplot(df, aes(x =x , y = y)) + geom_point()
df <- data.frame(x = seq(-5, 5)*0.1, y = dnorm(x))
ggplot(df, aes(x =x , y = y)) + geom_point()
df <- data.frame(x = seq(-10, 10)*0.1, y = dnorm(x))
ggplot(df, aes(x =x , y = y)) + geom_point()
df <- data.frame(x = seq(-50, 50)*0.1, y = dnorm(x))
ggplot(df, aes(x =x , y = y)) + geom_point()
df <- data.frame(x = seq(-50, 50)*0.1, y = dnorm(seq(-50, 50)*0.1))
ggplot(df, aes(x =x , y = y)) + geom_point()
x <- seq(-10, 10)*0.05
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-20, 20)*0.05
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-20, 20)*0.5
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-20, 20)*0.1
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-95, 95)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-0.95, 0.95, by = 0.05)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-0.95, 0.95, by = 0.01)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-0.99, 0.99, by = 0.01)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-1, 1, by = 0.1)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
?qnorm
qnorm(0.05)
x <- seq(-4, 4, by = 0.1)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
x <- seq(-4, 4, by = 0.5)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_point()
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_line()
x <- seq(-4, 4, by = 0.25)
distribution_df <- data.frame(quantile = x, y = dnorm(x, mu, sd))
ggplot(distribution_df, aes(y = y, x = quantile)) + geom_line()
shinyapps::setAccountInfo(name='wei-ann-lim', token='D8B4CCF1A4C1DBEB500FEE09F31A947A', secret='I6ZalXwTEbG9p9/W5TWAYjfFlVklMC9TddTqVBjj')
library(shiny)
shinyapps::setAccountInfo(name='wei-ann-lim', token='D8B4CCF1A4C1DBEB500FEE09F31A947A', secret='I6ZalXwTEbG9p9/W5TWAYjfFlVklMC9TddTqVBjj')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::deployApp('C:/Users/luffy_84hotmail.com/SkyDrive/coursera/IDA MOOC data science/data products/hello shiny')
setAccountInfo
?setAccountInfo
shinyapps::setAccountInfo(name='wei-ann-lim', token='D8B4CCF1A4C1DBEB500FEE09F31A947A', secret='I6ZalXwTEbG9p9/W5TWAYjfFlVklMC9TddTqVBjj')
shinyapps::deployApp('C:/Users/luffy_84hotmail.com/SkyDrive/coursera/IDA MOOC data science/data products/hello shiny')
install.packages("Rtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
setwd("E:/oneDrive/coursera/IDA MOOC data science/data products/project")
